//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Simple.g 2012-02-19 09:44:06

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class SimpleLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int DIGIT=4;
	public const int IDENT=5;
	public const int LETTER=6;
	public const int NUMBER=7;
	public const int WS=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;

    // delegates
    // delegators

	public SimpleLexer()
	{
		OnCreated();
	}

	public SimpleLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public SimpleLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Simple.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__9();
	partial void LeaveRule_T__9();

	// $ANTLR start "T__9"
	[GrammarRule("T__9")]
	private void mT__9()
	{
		EnterRule_T__9();
		EnterRule("T__9", 1);
		TraceIn("T__9", 1);
		try
		{
			int _type = T__9;
			int _channel = DefaultTokenChannel;
			// Simple.g:7:6: ( '(' )
			DebugEnterAlt(1);
			// Simple.g:7:8: '('
			{
			DebugLocation(7, 8);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__9", 1);
			LeaveRule("T__9", 1);
			LeaveRule_T__9();
		}
	}
	// $ANTLR end "T__9"

	partial void EnterRule_T__10();
	partial void LeaveRule_T__10();

	// $ANTLR start "T__10"
	[GrammarRule("T__10")]
	private void mT__10()
	{
		EnterRule_T__10();
		EnterRule("T__10", 2);
		TraceIn("T__10", 2);
		try
		{
			int _type = T__10;
			int _channel = DefaultTokenChannel;
			// Simple.g:8:7: ( ')' )
			DebugEnterAlt(1);
			// Simple.g:8:9: ')'
			{
			DebugLocation(8, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__10", 2);
			LeaveRule("T__10", 2);
			LeaveRule_T__10();
		}
	}
	// $ANTLR end "T__10"

	partial void EnterRule_T__11();
	partial void LeaveRule_T__11();

	// $ANTLR start "T__11"
	[GrammarRule("T__11")]
	private void mT__11()
	{
		EnterRule_T__11();
		EnterRule("T__11", 3);
		TraceIn("T__11", 3);
		try
		{
			int _type = T__11;
			int _channel = DefaultTokenChannel;
			// Simple.g:9:7: ( '*' )
			DebugEnterAlt(1);
			// Simple.g:9:9: '*'
			{
			DebugLocation(9, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__11", 3);
			LeaveRule("T__11", 3);
			LeaveRule_T__11();
		}
	}
	// $ANTLR end "T__11"

	partial void EnterRule_T__12();
	partial void LeaveRule_T__12();

	// $ANTLR start "T__12"
	[GrammarRule("T__12")]
	private void mT__12()
	{
		EnterRule_T__12();
		EnterRule("T__12", 4);
		TraceIn("T__12", 4);
		try
		{
			int _type = T__12;
			int _channel = DefaultTokenChannel;
			// Simple.g:10:7: ( '+' )
			DebugEnterAlt(1);
			// Simple.g:10:9: '+'
			{
			DebugLocation(10, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__12", 4);
			LeaveRule("T__12", 4);
			LeaveRule_T__12();
		}
	}
	// $ANTLR end "T__12"

	partial void EnterRule_T__13();
	partial void LeaveRule_T__13();

	// $ANTLR start "T__13"
	[GrammarRule("T__13")]
	private void mT__13()
	{
		EnterRule_T__13();
		EnterRule("T__13", 5);
		TraceIn("T__13", 5);
		try
		{
			int _type = T__13;
			int _channel = DefaultTokenChannel;
			// Simple.g:11:7: ( ',' )
			DebugEnterAlt(1);
			// Simple.g:11:9: ','
			{
			DebugLocation(11, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__13", 5);
			LeaveRule("T__13", 5);
			LeaveRule_T__13();
		}
	}
	// $ANTLR end "T__13"

	partial void EnterRule_T__14();
	partial void LeaveRule_T__14();

	// $ANTLR start "T__14"
	[GrammarRule("T__14")]
	private void mT__14()
	{
		EnterRule_T__14();
		EnterRule("T__14", 6);
		TraceIn("T__14", 6);
		try
		{
			int _type = T__14;
			int _channel = DefaultTokenChannel;
			// Simple.g:12:7: ( '-' )
			DebugEnterAlt(1);
			// Simple.g:12:9: '-'
			{
			DebugLocation(12, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__14", 6);
			LeaveRule("T__14", 6);
			LeaveRule_T__14();
		}
	}
	// $ANTLR end "T__14"

	partial void EnterRule_T__15();
	partial void LeaveRule_T__15();

	// $ANTLR start "T__15"
	[GrammarRule("T__15")]
	private void mT__15()
	{
		EnterRule_T__15();
		EnterRule("T__15", 7);
		TraceIn("T__15", 7);
		try
		{
			int _type = T__15;
			int _channel = DefaultTokenChannel;
			// Simple.g:13:7: ( '/' )
			DebugEnterAlt(1);
			// Simple.g:13:9: '/'
			{
			DebugLocation(13, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__15", 7);
			LeaveRule("T__15", 7);
			LeaveRule_T__15();
		}
	}
	// $ANTLR end "T__15"

	partial void EnterRule_T__16();
	partial void LeaveRule_T__16();

	// $ANTLR start "T__16"
	[GrammarRule("T__16")]
	private void mT__16()
	{
		EnterRule_T__16();
		EnterRule("T__16", 8);
		TraceIn("T__16", 8);
		try
		{
			int _type = T__16;
			int _channel = DefaultTokenChannel;
			// Simple.g:14:7: ( ';' )
			DebugEnterAlt(1);
			// Simple.g:14:9: ';'
			{
			DebugLocation(14, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__16", 8);
			LeaveRule("T__16", 8);
			LeaveRule_T__16();
		}
	}
	// $ANTLR end "T__16"

	partial void EnterRule_T__17();
	partial void LeaveRule_T__17();

	// $ANTLR start "T__17"
	[GrammarRule("T__17")]
	private void mT__17()
	{
		EnterRule_T__17();
		EnterRule("T__17", 9);
		TraceIn("T__17", 9);
		try
		{
			int _type = T__17;
			int _channel = DefaultTokenChannel;
			// Simple.g:15:7: ( '=' )
			DebugEnterAlt(1);
			// Simple.g:15:9: '='
			{
			DebugLocation(15, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__17", 9);
			LeaveRule("T__17", 9);
			LeaveRule_T__17();
		}
	}
	// $ANTLR end "T__17"

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 10);
		TraceIn("T__18", 10);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// Simple.g:16:7: ( 'input' )
			DebugEnterAlt(1);
			// Simple.g:16:9: 'input'
			{
			DebugLocation(16, 9);
			Match("input"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 10);
			LeaveRule("T__18", 10);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 11);
		TraceIn("T__19", 11);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// Simple.g:17:7: ( 'print' )
			DebugEnterAlt(1);
			// Simple.g:17:9: 'print'
			{
			DebugLocation(17, 9);
			Match("print"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 11);
			LeaveRule("T__19", 11);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 12);
		TraceIn("NUMBER", 12);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// Simple.g:61:2: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// Simple.g:61:4: ( DIGIT )+
			{
			DebugLocation(61, 4);
			// Simple.g:61:4: ( DIGIT )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Simple.g:
					{
					DebugLocation(61, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 12);
			LeaveRule("NUMBER", 12);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 13);
		TraceIn("IDENT", 13);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// Simple.g:65:2: ( ( LETTER | '_' ) ( LETTER | '_' | DIGIT )* )
			DebugEnterAlt(1);
			// Simple.g:65:4: ( LETTER | '_' ) ( LETTER | '_' | DIGIT )*
			{
			DebugLocation(65, 4);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(65, 19);
			// Simple.g:65:19: ( LETTER | '_' | DIGIT )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='0' && LA2_1<='9')||(LA2_1>='A' && LA2_1<='Z')||LA2_1=='_'||(LA2_1>='a' && LA2_1<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Simple.g:
					{
					DebugLocation(65, 19);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 13);
			LeaveRule("IDENT", 13);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 14);
		TraceIn("LETTER", 14);
		try
		{
			// Simple.g:72:2: ( 'A' .. 'Z' | 'a' .. 'z' )
			DebugEnterAlt(1);
			// Simple.g:
			{
			DebugLocation(72, 2);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 14);
			LeaveRule("LETTER", 14);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 15);
		TraceIn("DIGIT", 15);
		try
		{
			// Simple.g:77:2: ( '0' .. '9' )
			DebugEnterAlt(1);
			// Simple.g:
			{
			DebugLocation(77, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 15);
			LeaveRule("DIGIT", 15);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 16);
		TraceIn("WS", 16);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Simple.g:80:2: ( ( '\\t' | ( '\\r' )? '\\n' | ' ' )+ )
			DebugEnterAlt(1);
			// Simple.g:80:4: ( '\\t' | ( '\\r' )? '\\n' | ' ' )+
			{
			DebugLocation(80, 4);
			// Simple.g:80:4: ( '\\t' | ( '\\r' )? '\\n' | ' ' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=4;
				try { DebugEnterDecision(4, false);
				switch (input.LA(1))
				{
				case '\t':
					{
					alt4 = 1;
					}
					break;
				case '\n':
				case '\r':
					{
					alt4 = 2;
					}
					break;
				case ' ':
					{
					alt4 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// Simple.g:80:5: '\\t'
					{
					DebugLocation(80, 5);
					Match('\t'); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Simple.g:80:12: ( '\\r' )? '\\n'
					{
					DebugLocation(80, 12);
					// Simple.g:80:12: ( '\\r' )?
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1=='\r'))
					{
						alt3 = 1;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// Simple.g:80:12: '\\r'
						{
						DebugLocation(80, 12);
						Match('\r'); 

						}
						break;

					}
					} finally { DebugExitSubRule(3); }

					DebugLocation(80, 18);
					Match('\n'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Simple.g:80:25: ' '
					{
					DebugLocation(80, 25);
					Match(' '); 

					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(80, 31);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 16);
			LeaveRule("WS", 16);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// Simple.g:1:8: ( T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | NUMBER | IDENT | WS )
		int alt5=14;
		try { DebugEnterDecision(5, false);
		switch (input.LA(1))
		{
		case '(':
			{
			alt5 = 1;
			}
			break;
		case ')':
			{
			alt5 = 2;
			}
			break;
		case '*':
			{
			alt5 = 3;
			}
			break;
		case '+':
			{
			alt5 = 4;
			}
			break;
		case ',':
			{
			alt5 = 5;
			}
			break;
		case '-':
			{
			alt5 = 6;
			}
			break;
		case '/':
			{
			alt5 = 7;
			}
			break;
		case ';':
			{
			alt5 = 8;
			}
			break;
		case '=':
			{
			alt5 = 9;
			}
			break;
		case 'i':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='n'))
			{
				int LA5_3 = input.LA(3);

				if ((LA5_3=='p'))
				{
					int LA5_4 = input.LA(4);

					if ((LA5_4=='u'))
					{
						int LA5_5 = input.LA(5);

						if ((LA5_5=='t'))
						{
							int LA5_6 = input.LA(6);

							if (((LA5_6>='0' && LA5_6<='9')||(LA5_6>='A' && LA5_6<='Z')||LA5_6=='_'||(LA5_6>='a' && LA5_6<='z')))
							{
								alt5 = 13;
							}
							else
							{
								alt5 = 10;
							}
						}
						else
						{
							alt5 = 13;
						}
					}
					else
					{
						alt5 = 13;
					}
				}
				else
				{
					alt5 = 13;
				}
			}
			else
			{
				alt5 = 13;
			}
			}
			break;
		case 'p':
			{
			int LA5_2 = input.LA(2);

			if ((LA5_2=='r'))
			{
				int LA5_3 = input.LA(3);

				if ((LA5_3=='i'))
				{
					int LA5_4 = input.LA(4);

					if ((LA5_4=='n'))
					{
						int LA5_5 = input.LA(5);

						if ((LA5_5=='t'))
						{
							int LA5_6 = input.LA(6);

							if (((LA5_6>='0' && LA5_6<='9')||(LA5_6>='A' && LA5_6<='Z')||LA5_6=='_'||(LA5_6>='a' && LA5_6<='z')))
							{
								alt5 = 13;
							}
							else
							{
								alt5 = 11;
							}
						}
						else
						{
							alt5 = 13;
						}
					}
					else
					{
						alt5 = 13;
					}
				}
				else
				{
					alt5 = 13;
				}
			}
			else
			{
				alt5 = 13;
			}
			}
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt5 = 12;
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt5 = 13;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt5 = 14;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(5); }
		switch (alt5)
		{
		case 1:
			DebugEnterAlt(1);
			// Simple.g:1:10: T__9
			{
			DebugLocation(1, 10);
			mT__9(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Simple.g:1:15: T__10
			{
			DebugLocation(1, 15);
			mT__10(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Simple.g:1:21: T__11
			{
			DebugLocation(1, 21);
			mT__11(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Simple.g:1:27: T__12
			{
			DebugLocation(1, 27);
			mT__12(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Simple.g:1:33: T__13
			{
			DebugLocation(1, 33);
			mT__13(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Simple.g:1:39: T__14
			{
			DebugLocation(1, 39);
			mT__14(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Simple.g:1:45: T__15
			{
			DebugLocation(1, 45);
			mT__15(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Simple.g:1:51: T__16
			{
			DebugLocation(1, 51);
			mT__16(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Simple.g:1:57: T__17
			{
			DebugLocation(1, 57);
			mT__17(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Simple.g:1:63: T__18
			{
			DebugLocation(1, 63);
			mT__18(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Simple.g:1:69: T__19
			{
			DebugLocation(1, 69);
			mT__19(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Simple.g:1:75: NUMBER
			{
			DebugLocation(1, 75);
			mNUMBER(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Simple.g:1:82: IDENT
			{
			DebugLocation(1, 82);
			mIDENT(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Simple.g:1:88: WS
			{
			DebugLocation(1, 88);
			mWS(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
